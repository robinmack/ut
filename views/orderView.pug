extends menuBar
append body
    form(action="#")
        div(class="container-fluid")
            div(class="col-md-3")
                fieldset
                    label Order Date
                        input#date.form-control.input-large(value= !!order ? order.date.getMonth() + "/" + order.date.getDate() + "/" + order.date.getYear() : "" readonly = !biggerThanBuilder)
            div(class="col-md-3")
                fieldset
                    label Order Number
                        input#orderNumber.form-control.input-large(value= !!order ? order.id : "" readonly = true)
            div(class="col-md-12")
                h3 Customer:
                div(class="well container-fluid")
                    div(class="col-md-3")
                        fieldset
                            label(for="lastname") Last Name
                                input#lastname.form-control.input-medium(disabled value= !!order ? order.lastname : "")
                    div(class="col-md-3")
                        fieldset(class="span12")
                            label(for="firstname") First Name
                                input#firstname.form-control.input-medium(disabled value= !!order ? order.firstname : "")
                    div(class="col-md-3")
                        fieldset
                            label(for="email") Email
                                input#email.form-control.input-medium(disabled value= !!order ? order.email : "")
            div(class="col-md-12")
                div(class="col-md-3")
                    a(class="action button" href="/customers/edit/" + order.customer_id) Edit Customer
            div(class="col-md-12")
                h3 Credit Card:
            div(class="col-md-12")
                div(class="col-md-2")
                    fieldset
                        label(for="cardType") Card Type
                            select#cardType.form-control.input-medium(readonly = !biggerThanBuilder)
                                option(value="American Express" selected= !!order ? order.card_type === "American Express" : "" ) American Express
                                option(value="Visa" selected= !!order ? order.card_type === "Visa" : "" ) Visa
                                option(value="MasterCard" selected= !!order ? order.card_type === "MasterCard" : "" ) MasterCard
                                option(value="Discover" selected= !!order ? order.card_type === "Discover" : "" ) Discover
                div(class="col-md-3")
                    fieldset(class="span12")
                        label(for="cardName") Name on Card
                            input#cardName.form-control.input-medium(value= !!order ? order.card_name : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        if(biggerThanBuilder)
                            label(for="cardNumber") Card Number
                                input#cardNumber.form-control.input-medium(value= !!order ? order.card_number : "")
                        else
                            label Card Number
                                input#redacted.form-control.input-medium(value="Redacted" readOnly=!biggerThanBuilder)
                div(class="col-md-2")
                    fieldset
                        label Expiration Date
                            input#cardExpire.form-control.input-large(value= !!order ? order.card_expire : "" readonly=!biggerThanBuilder)
                div(class="col-md-2")
                    fieldset
                        label(for="cvv") CVV
                            input#cvv.form-control.input-medium(value= !!order ? order.card_civ : "" readonly=!biggerThanBuilder)

            div(class="col-md-12")
                h3 Rack 1:
                    if order && order.service
                        p #{order.service}
                div(class="col-md-3")
                    fieldset
                        label(for="reverse") Reverse
                            input#reverse.form-control.input-medium(type='checkbox' name='reverse' readonly=!biggerThanBuilder checked = rchecked=(order.reverse==="Normal" ? undefined : "checked"))
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Row Fill
                                input#rowFill.form-control.input-medium(value= !!order?order.row_fill: "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numberRibbons") Quantity
                            input#numberRibbons.form-control.input-medium(value= !!order ? order.number_ribbons : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Total Ribbon Price
                            input#totalRibbons.form-control.input-medium(value= !!order ? order.total_ribbons : "" readonly=true)

                div(class="col-md-3")
                    fieldset
                        label(for="rack1Op") Order of Precedence
                            select#rack1Op.form-control.select-medium
                                option(value='please_select') -- Please Select --
                                option(value='army_left') Army (Left)
                                option(value='army_right') Army (Right)
                                option(value='navy') Navy
                                option(value='af') Air Force
                                option(value="marine") Marine Corps
                                option(value='cg') Coast Guard
                                option(value='cap') Civil Air Patrol
                                option(value='cgaux') Coast Guard Auxiliary
                                option(value='phs') Public Health Service
                                option(value='noaa') NOAA
                                option(value='merchant_marine') Merchant Marine
            div(class="col-md-12")
                div(id = "ribbonRack1" class="container-fluid")

            div(class="col-md-12")
                h3 Rack 2:
                    if order && order.service
                        p #{order.service}
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Row Fill
                            input#rowFill2.form-control.input-medium(value= !!order?order.row_fill_2: "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numberRibbons") Quantity
                            input#numberRibbons2.form-control.input-medium(value= !!order ? order.number_ribbons_2 : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Total Ribbon Price
                            input#totalRibbons2.form-control.input-medium(value= !!order ? order.total_ribbons : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rack2Op") Order of Precedence
                            select#rack2Op.form-control.select-medium
                                option(value='please_select') -- Please Select --
                                option(value='army_left') Army (Left)
                                option(value='army_right') Army (Right)
                                option(value='navy') Navy
                                option(value='af') Air Force
                                option(value="marine") Marine Corps
                                option(value='cg') Coast Guard
                                option(value='cap') Civil Air Patrol
                                option(value='cgaux') Coast Guard Auxiliary
                                option(value='phs') Public Health Service
                                option(value='noaa') NOAA
                                option(value='merchant_marine') Merchant Marine\

            div(class="col-md-12")
                div(id="ribbonRack2")
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Number of Devices
                            input#numDevices.form-control.input-medium(value= !!order?order.number_devices: "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numberRibbons") Number of Attachments
                            input#numAttach.form-control.input-medium(value= !!order ? order.number_attach : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Number of Pins
                            input#numPin.form-control.input-medium(value= !!order ? order.number_pin : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Number of Magnetic
                            input#numMagnetic.form-control.input-medium(value= !!order ? order.number_magnetic : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                h3 Mini Medal Sets:
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedals") Quantity
                            input#numMiniMedals.form-control.input-medium(value= !!order ? order.number_mini_medal_sets : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalDevice") Mini Medal Devices
                            input#numMiniMedalDevice.form-control.input-medium(value= !!order ? order.number_mini_medal_device : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalAttach") Mini Medal Attachments
                            input#numMiniMedalAttach.form-control.input-medium(value= !!order ? order.number_mini_medal_attach : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalMiniMedals") Total
                            input#totalMiniMedals.form-control.input-medium(value= !!order ? order.total_medals : "" readonly=true)
                div(class="col-md-12")
                    div(id="#mini-medal-rack")
            div(class="col-md-12")
                h3 Large Medal Sets:
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalSets") Quantity
                            input#numLargeMedalSets.form-control.input-medium(value= !!order ? order.number_large_medal_sets : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalDevice") Large Medal Devices
                            input#numLargeMedalDevice.form-control.input-medium(value= !!order ? order.number_large_medal_device : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalAttach") Large Medal Attachments
                            input#numLargeMedalAttach.form-control.input-medium(value= !!order ? order.number_large_medal_attach : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalSets") Anodize
                            input#anodize.form-control.input-medium(value= !!order ? order.anodize : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalDevice") Anodized Total
                            input#anodized_total.form-control.input-medium(value= !!order ? order.anodized_total : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalAttach") Total
                            input#largeMedalsTotal.form-control.input-medium(value= !!order ? order.large_medals_total : "" readonly = true)
            div(class="col-md-12")
                div(class="col-md-12")
                    div(id="#large-medal-rack")
            div(class="col-md-12")
                h3 Name Tags:
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="tagBranch") Name Tag Branch
                            select#tagBranch.select.form-control.input-medium
                                option(value="" selected=!!!customer) -- Choose --
                                option(value="Army" selected=!!customer ? customer.service == "Army" : false) Army
                                option(value="Navy" selected=!!customer ? customer.service == "Navy" : false) Navy
                                option(value="Air Force" selected=!!customer ? customer.service == "Air Force" : false) Air Force
                                option(value="Marine Corps" selected=!!customer ? customer.service == "Marine Corps" : false) Marine Corps
                                option(value="Coast Guard" selected=!!customer ? customer.service == "Coast Guard" : false) Coast Guard
                                option(value="Civil Air Patrol" selected=!!customer ? customer.service == "Civil Air Patrol" : false) Civil Air Patrol
                                option(value="Coast Guard Auxiliary" selected=!!customer ? customer.service == "Coast Guard Auxiliary" : false) Coast Guard Auxiliary
                                option(value="Public Health Service" selected=!!customer ? customer.service == "Public Health Service" : false) Public Health Service
                                option(value="NOAA" selected=customer ? !!customer.service == "NOAA" : false) NOAA
                                option(value="Merchant Marine" selected=!!customer ? customer.service == "Merchant Marine" : false) Merchant Marine
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Name Tag Line 1
                            input#nameTagLine1.form-control.input-medium(value= !!order ? order.name_tag_line_1 : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numberRibbons") Name Tag Line 2
                            input#NameTagLine2.form-control.input-medium(value= !!order ? order.name_tag_line_2 : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Qty Pin Tag
                            input#numPinTag.form-control.input-medium(value= !!order ? order.number_pin_tag : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numberRibbons") Qty Magnetic Tag
                            input#numMagneticTag.form-control.input-medium(value= !!order ? order.number_magnetic_tag : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Total
                            input#totalNameTag.form-control.input-medium(value= !!order ? order.total_name_tag : "" readonly=true)
            div(class="col-md-12")
                h3 Comments/Notes:
            div(class="col-md-12")
                div(class="col-md-12")
                    fieldset
                        label(for="rowFill2") Customer Comments
                            textarea#comments.form-control.input-medium(rows="3" value= !!order ? order.comments : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-12")
                    fieldset
                        label(for="rowFill2") Internal Notes Comments
                            textarea#notes.form-control.input-medium(rows="3" value= !!order ? order.comments : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                input(type="submit" onclick="submitClick(event)" class="submit button" value=buttonText)
    include ribbonPalette
    include devicesAttachmentsPalette
    script.
        var rack1=[], rack2=[], precedence1, precedence2,
            rack1Selector="#ribbonRack1",
            rack2Selector="#ribbonRack2";
        window.onload = (function (){
            //setup rack component(s)
            setupRackComponents();
        });
        function setAwardSource(e){
            var awardSource = $(e.target).data("awardsource");
            $('#award-source').val(awardSource);
        }

        function setDeviceAttachmentSource(e){
            var deviceAttachmentSource = $(e.target).data("awardsource");
            var deviceAttachmentAward = $(e.target).data("award");
            $('#device-attachment-source').val(deviceAttachmentSource);
            $('#device-attachment-award').val(JSON.stringify(deviceAttachmentAward));

        }
        function addAward(){
            switch ($('#award-source').val()){
                case "#ribbonRack1":
                    rack1.push({columns: [selectedRibbon]});
                    this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector);
                    break;
                case "#ribbonRack2":
                    rack2.push({columns: [selectedRibbon]});
                    this.ribbonListComponent1.setPrecedence(precedence2).renderRack(rack2, rack2Selector);
                    break;
            }
        }
        function addDeviceAttachment() {
            switch ($('#device-attachment-source').val()) {
                case "#ribbonRack1":
                    addDeviceAttachmentToAward(rack1, JSON.parse($("#device-attachment-award").val()), selectedDeviceAttachmentCode);
                    this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector);
                    break;
                case "#ribbonRack2":
                    addDeviceAttachmentToAward(rack2, JSON.parse($("#device-attachment-award").val()), selectedDeviceAttachmentCode);
                    this.ribbonListComponent1.setPrecedence(precedence2).renderRack(rack2, rack2Selector);
                    break;
            }
        }

        function addDeviceAttachmentToAward(rack, selectedAward, selectedDeviceAttachment) {
            var coordinates = [];
            rack.forEach(function (row, rowIndex){
                row.columns.forEach(function(column, columnIndex){
                    if (column.code === selectedAward.code) {
                        coordinates = [rowIndex, columnIndex];
                    }
                });
            });
            var awardConcatenator = " + "
            if (rack[coordinates[0]].columns[coordinates[1]].code.split(" ").length < 2) {
                awardConcatenator = " ";
            }
            rack[coordinates[0]].columns[coordinates[1]].code += awardConcatenator + selectedDeviceAttachment;
        }

        function removeAward(event) {
            event.preventDefault();
            var awardToRemove = $(event.target).parent().data("ribbon");
            var awardSelector = $(event.target).parent().data("award-source");
            switch (awardSelector) {
                case "#ribbonRack1":
                    var removedRack = [];
                    rack1.forEach(function(row) {
                        var newColumns = row.columns.filter(function (col){return col.name !== awardToRemove.name;});
                        removedRack.push({columns: newColumns});
                    });
                    rack1 = removedRack;
                    this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector);
                    break;
                case "#ribbonRack2":
                    var removedRack = [];
                    rack2.forEach(function (row) {
                        var newColumns = row.columns.filter(function (col) {
                            return col.name !== awardToRemove.name;
                        });
                        removedRack.push({columns: newColumns});
                    });
                    rack2 = removedRack;
                    this.ribbonListComponent2.setPrecedence(precedence2).renderRack(rack2, rack2Selector);
                    break;
            }
        }
        function setupRackComponents(){
            var precedenceLists = !{JSON.stringify(precedenceLists)};
            rack1 = !{listRibbons1 ? JSON.stringify(listRibbons1):[]};
            var biggerThanBuilder = !{biggerThanBuilder};
            rack2 = !{listRibbons2 ? JSON.stringify(listRibbons2):[]};
            this.ribbonListComponent1 = Rack(precedenceLists, biggerThanBuilder);
            this.ribbonListComponent2 = Rack(precedenceLists, biggerThanBuilder);
            var service = "!{order.service}";

            var guessedOP = this.ribbonListComponent1.guessOP(service);

            if ($("#rack1Op").val() === "please_select") {
                $('#rack1Op option[value=' + guessedOP + ']').prop('selected', true);
                precedence1 = guessedOP;
            } else {
                this.ribbonListComponent1.setPrecedence($("#rack10p").val());
            }
            if ($("#rack2Op").val() === "please_select") {
                $('#rack2Op option[value=' + guessedOP + ']').prop('selected', true);
                precedence1 = guessedOP;
            } else {
                this.ribbonListComponent2.setPrecedence($("#rack20p").val());
            }

            $("#rack1Op").change(function () {
                precedence1 = $("#rack1Op").val();
                this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector);
            });
            $("#rack2Op").change(function () {
                precedence1 = $("#rack2Op").val();
                this.ribbonListComponent2.setPrecedence(precedence2).renderRack(rack2, rack2Selector);
            });

            this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector);
            this.ribbonListComponent2.setPrecedence(precedence2).renderRack(rack2, rack2Selector);
            var rackForSubmit = ribbonListComponent1.getRackForSubmit(rack1Selector);
        };

        function submitClick(event) {
            event.preventDefault();
            $.ajax({
                url: "#{action}",
                type: "#{method}",
                contentType: "application/json",
                data: JSON.stringify({
                    id: $("#id").val(),
                    city: $("#city").val(),
                    state: $("#state").val(),
                    zip: $("#zip").val(),
                    email: $("#email").val(),
                    phone: $("#phone").val(),
                    service: $("#service").val(),
                    gender: $("#gender").val()
                }),
                success: function (result) {
                    $("#notification").empty()
                        .attr("class", "")
                        .append(result.message)
                        .addClass("success");
                },
                error: function (jXQHR, errString) {
                    $("#notification").empty()
                        .attr("class", "")
                        .append("Failed operation on user.  Error was:" + errString)
                        .addClass("error");
                }
            });
        };