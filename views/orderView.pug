extends menuBar
append body
    form(action="#")
        div(class="container-fluid")
            div(class="col-md-3")
                fieldset
                    label Order Date
                        input#date.form-control.input-large(value= !!order ? order.date.getMonth() + "/" + order.date.getDate() + "/" + order.date.getYear() : "" readonly = !biggerThanBuilder)
            div(class="col-md-3")
                fieldset
                    label Order Number
                        input#orderNumber.form-control.input-large(value= !!order ? order.id : "" readonly = true)
            div(class="col-md-12")
                h3 Customer:
                div(class="well container-fluid")
                    div(class="col-md-3")
                        fieldset
                            label(for="lastname") Last Name
                                input#lastname.form-control.input-medium(disabled value= !!order ? order.lastname : "")
                    div(class="col-md-3")
                        fieldset(class="span12")
                            label(for="firstname") First Name
                                input#firstname.form-control.input-medium(disabled value= !!order ? order.firstname : "")
                    div(class="col-md-3")
                        fieldset
                            label(for="email") Email
                                input#email.form-control.input-medium(disabled value= !!order ? order.email : "")
            div(class="col-md-12")
                div(class="col-md-3")
                    a(class="action button" href="/customers/edit/" + order.customer_id) Edit Customer
            div(class="col-md-12")
                h3 Credit Card:
            div(class="col-md-12")
                div(class="col-md-2")
                    fieldset
                        label(for="cardType") Card Type
                            select#cardType.form-control.input-medium(readonly = !biggerThanBuilder)
                                option(value="American Express" selected= !!order ? order.card_type === "American Express" : "" ) American Express
                                option(value="Visa" selected= !!order ? order.card_type === "Visa" : "" ) Visa
                                option(value="MasterCard" selected= !!order ? order.card_type === "MasterCard" : "" ) MasterCard
                                option(value="Discover" selected= !!order ? order.card_type === "Discover" : "" ) Discover
                div(class="col-md-3")
                    fieldset(class="span12")
                        label(for="cardName") Name on Card
                            input#cardName.form-control.input-medium(value= !!order ? order.card_name : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        if(biggerThanBuilder)
                            label(for="cardNumber") Card Number
                                input#cardNumber.form-control.input-medium(value= !!order ? order.card_number : "")
                        else
                            label Card Number
                                input#redacted.form-control.input-medium(value="Redacted" readOnly=!biggerThanBuilder)
                div(class="col-md-2")
                    fieldset
                        label Expiration Date
                            input#cardExpire.form-control.input-large(value= !!order ? order.card_expire : "" readonly=!biggerThanBuilder)
                div(class="col-md-2")
                    fieldset
                        label(for="cvv") CVV
                            input#cvv.form-control.input-medium(value= !!order ? order.card_civ : "" readonly=!biggerThanBuilder)

            div(class="col-md-12")
                //#####################################
                h3 Ribbon Rack 1:
                    if order && order.service
                        p #{order.service}
                div(class="col-md-3")
                    fieldset
                        label(for="reverse") Reverse
                            input#reverse.form-control.input-medium(type='checkbox' name='reverse' readonly=!biggerThanBuilder checked = rchecked=(order.reverse==="Normal" ? undefined : "checked"))
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Row Fill
                                input#rowFill.form-control.input-medium(value= !!order?order.row_fill: "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="rack1Op") Order of Precedence
                            select#rack1Op.form-control.select-medium
                                option(value='please_select') -- Please Select --
                                option(value='army_left') Army (Left)
                                option(value='army_right') Army (Right)
                                option(value='navy') Navy
                                option(value='af') Air Force
                                option(value="marines") Marine Corps
                                option(value='cg') Coast Guard
                                option(value='cap') Civil Air Patrol
                                option(value='cgaux') Coast Guard Auxiliary
                                option(value='phs') Public Health Service
                                option(value='noaa') NOAA
                                option(value='merchant_marine') Merchant Marine
                                option(value='war_service') War Service
            div(class="col-md-12")
                div(id = "ribbonRack1" class="container-fluid")
            div(class="col-md-12")
                h3 Ribbon Rack 1 Totals:
                div(class="col-md-3")
                    fieldset
                        label(for="numRibbons") Quantity
                            input#numRibbons.form-control.input-medium(value= !!order ? order.number_ribbons : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numDevices") Number of Devices
                            input#numDevices.form-control.input-medium(value= !!order ? order.number_devices : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numAttach") Number of Attachments
                            input#numAttach.form-control.input-medium(value= !!order ? order.number_attachments : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numPin") Number of Pins
                            input#numPin.form-control.input-medium(value= !!order ? order.number_pins : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMagnetic") Number of Magnetic
                            input#numMagnetic.form-control.input-medium(value= !!order ? order.number_magnetic : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalRibbons1") Rack 1 Total
                            input#totalRibbons1.form-control.input-medium(readonly=true)
            div(class="col-md-12")
                //#####################################
                h3 Ribbon Rack 2:
                    if order && order.service
                        p #{order.service}
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill2") Row Fill
                            input#rowFill2.form-control.input-medium(value= !!order?order.row_fill_2: "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rack2Op") Order of Precedence
                            select#rack2Op.form-control.select-medium
                                option(value='please_select') -- Please Select --
                                option(value='army_left') Army (Left)
                                option(value='army_right') Army (Right)
                                option(value='navy') Navy
                                option(value='af') Air Force
                                option(value="marines") Marine Corps
                                option(value='cg') Coast Guard
                                option(value='cap') Civil Air Patrol
                                option(value='cgaux') Coast Guard Auxiliary
                                option(value='phs') Public Health Service
                                option(value='noaa') NOAA
                                option(value='merchant_marine') Merchant Marine
                                option(value='war_service') War Service

            div(class="col-md-12")
                div(id="ribbonRack2")
            div(class="col-md-12")
                h3 Ribbon Rack 2 Totals:
                div(class="col-md-3")
                    fieldset
                        label(for="numRibbons2") Quantity
                            input#numRibbons2.form-control.input-medium(value= !!order ? order.number_ribbons_2 : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numDevices") Number of Devices
                            input#numDevices2.form-control.input-medium(value= !!order?order.number_devices_2: "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numAttach") Number of Attachments
                            input#numAttach2.form-control.input-medium(value= !!order ? order.number_attach_2 : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numPin2") Number of Pins
                            input#numPin2.form-control.input-medium(value= !!order ? order.number_pin_2 : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMagnetic2") Number of Magnetic
                            input#numMagnetic2.form-control.input-medium(value= !!order ? order.number_magnetic_2 : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Total Rack 2
                            input#totalRibbons2.form-control.input-medium(value="" readonly=true)
            div(class="col-md-12")
                h3 Total Combined Ribbons:
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbonsQuantity") Total Magnetic
                            input#totalAllRibbonsQuantity.form-control.input-medium(value="" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbonsDevices") Total Devices
                            input#totalAllRibbonsDevices.form-control.input-medium(value="" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbonsAttach") Total Attachments
                            input#totalAllRibbonsAttach.form-control.input-medium(value="" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbonsMagnetic") Total Magnetic
                            input#totalAllRibbonsMagnetic.form-control.input-medium(value="" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbonsPin") Total Pin
                            input#totalAllRibbonsPin.form-control.input-medium(value="" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="totalAllRibbons") Total Price
                            input#totalAllRibbons.form-control.input-medium(value="" readonly=true)
            div(class="col-md-12")
                //#####################################
                h3 Mini Medal Sets:
            div(class="col-md-12")
                div(id="miniMedalRack")
            div(class="col-md-12")
                h3 Mini Medal Totals:
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedals") Quantity
                            input#numMiniMedals.form-control.input-medium(value= !!order ? order.number_mini_medal_sets : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalDevice") Mini Medal Devices
                            input#numMiniMedalDevice.form-control.input-medium(value= !!order ? order.number_mini_medal_device : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numMiniMedalAttach") Mini Medal Attachments
                            input#numMiniMedalAttach.form-control.input-medium(value= !!order ? order.number_mini_medal_attach : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalMiniMedals") Total
                            input#totalMiniMedals.form-control.input-medium(value= !!order ? order.total_mini_medals : "" readonly=true)
                div(class="col-md-12")
                    div(id="#mini-medal-rack")
            div(class="col-md-12")
                //#####################################
                h3 Large Medal Sets:
            div(class="col-md-12")
                div(id="largeMedalRack")
            div(class="col-md-12")
                h3 Large Medal Totals:
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalSets") Quantity
                            input#numLargeMedalSets.form-control.input-medium(value= !!order ? order.number_large_medal_sets : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalDevice") Large Medal Devices
                            input#numLargeMedalDevice.form-control.input-medium(value= !!order ? order.number_large_medal_device : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numLargeMedalAttach") Large Medal Attachments
                            input#numLargeMedalAttach.form-control.input-medium(value= !!order ? order.number_large_medal_attach : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="anodize") Anodize
                            input#anodize.form-control.input-medium(type='checkbox' name='anodize' readonly=!biggerThanBuilder checked = rchecked = (order.anodize === "annodize" ? "checked" : undefined))
                div(class="col-md-3")
                    fieldset
                        label(for="anodizedTotal") Anodized Total
                            input#anodizedTotal.form-control.input-medium(value= !!order ? order.anodized_total : "" readonly=true)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="largeMedalsTotal") Total
                            input#largeMedalsTotal.form-control.input-medium(value= !!order ? order.total_medals : "" readonly = true)
            div(class="col-md-12")
                div(class="col-md-12")
                    div(id="#large-medal-rack")
            div(class="col-md-12")
                h3 Name Tags:
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="tagBranch") Name Tag Branch
                            select#tagBranch.select.form-control.input-medium
                                option(value="" selected=!customer) -- Choose --
                                option(value="Army" selected=!!customer ? customer.service === "Army" : false) Army
                                option(value="Navy" selected=!!customer ? customer.service === "Navy" : false) Navy
                                option(value="Air Force" selected=!!customer ? customer.service === "Air Force" : false) Air Force
                                option(value="Marine Corps" selected=!!customer ? customer.service === "Marine Corps" : false) Marine Corps
                                option(value="Coast Guard" selected=!!customer ? customer.service === "Coast Guard" : false) Coast Guard
                                option(value="Civil Air Patrol" selected=!!customer ? customer.service === "Civil Air Patrol" : false) Civil Air Patrol
                                option(value="Coast Guard Auxiliary" selected=!!customer ? customer.service === "Coast Guard Auxiliary" : false) Coast Guard Auxiliary
                                option(value="Public Health Service" selected=!!customer ? customer.service === "Public Health Service" : false) Public Health Service
                                option(value="NOAA" selected=!!customer ? customer.service === "NOAA" : false) NOAA
                                option(value="Merchant Marine" selected=!!customer ? customer.service === "Merchant Marine" : false) Merchant Marine
                div(class="col-md-3")
                    fieldset
                        label(for="nameTagLine1") Name Tag Line 1
                            input#nameTagLine1.form-control.input-medium(value= !!order ? order.name_tag_line_1 : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="NameTagLine2") Name Tag Line 2
                            input#NameTagLine2.form-control.input-medium(value= !!order ? order.name_tag_line_2 : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="numPinTag") Qty Pin Tag
                            input#numPinTag.form-control.input-medium(value= !!order ? order.number_pin_tag : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="numMagneticTag") Qty Magnetic Tag
                            input#numMagneticTag.form-control.input-medium(value= !!order ? order.number_magnetic_tag : "" readonly=!biggerThanBuilder)
                div(class="col-md-3")
                    fieldset
                        label(for="rowFill") Total
                            input#totalNameTag.form-control.input-medium(value= !!order ? order.total_name_tag : "" readonly=true)
            div(class="col-md-12")
                h3 Comments/Notes:
            div(class="col-md-12")
                div(class="col-md-12")
                    fieldset
                        label(for="rowFill2") Customer Comments
                            textarea#comments.form-control.input-medium(rows="3" value= !!order ? order.comments : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-12")
                    fieldset
                        label(for="rowFill2") Internal Notes Comments
                            textarea#notes.form-control.input-medium(rows="3" value= !!order ? order.comments : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                h3 Order Totals:
                div(class="col-md-3")
                    fieldset
                        label(for="totalOrder") Total Order
                            input#totalOrder.form-control.input-medium(value= !!order ? order.total_order : "" readonly=true)
                div(class="col-md-3")
                    fieldset
                        label(for="numAttach") Shipping
                            input#shipping.form-control.input-medium(value= !!order ? order.shipping : "" readonly=!biggerThanBuilder)
            div(class="col-md-12")
                div(class="col-md-3")
                    fieldset
                        label(for="totalOrder") Grand Total
                            input#totalGrand.form-control.input-medium(value= !!order ? order.total_grand : "" readonly=true)
            div(class="col-md-12")
                input(type="submit" onclick="submitClick(event)" class="submit button" value=buttonText)
    include ribbonPalette
    include devicesAttachmentsPalette
    script.
        var rack1=[],
            rack2=[],
            miniMedalRack=[],
            largeMedalRack=[],
            precedence1,
            precedence2,
            rack1Selector="#ribbonRack1",
            rack2Selector="#ribbonRack2",
            miniMedalRackSelector="#miniMedalRack",
            largeMedalRackSelector="#largeMedalRack";
        window.onload = (function (){
            //setup rack component(s)
            setupRackComponents();
        });
        function setAwardSource(e){
            var awardSource = $(e.target).data("awardsource");
            $('#award-source').val(awardSource);
        }

        function setDeviceAttachmentSource(e){
            var deviceAttachmentSource = $(e.target).data("awardsource");
            var deviceAttachmentAward = JSON.parse(decodeURI($(e.target).attr("awardJSON")));
            $('#device-attachment-source').val(deviceAttachmentSource);
            $('#device-attachment-award').val(JSON.stringify(deviceAttachmentAward));
        }

        function addAward(){
            switch ($('#award-source').val()){
                case "#ribbonRack1":
                    rack1.push({columns: [selectedRibbon]});
                    renderRack1();
                    break;
                case "#ribbonRack2":
                    rack2.push({columns: [selectedRibbon]});
                    renderRack2();
                    break;
                case("#miniMedalRack"):
                    miniMedalRack.push({columns: [selectedRibbon]});
                    renderMiniMedalRack();
                    break;
                case("#largeMedalRack"):
                    largeMedalRack.push({columns: [selectedRibbon]});
                    renderLargeMedalRack();
            }
            $("#ribbonPalette").modal('toggle');
        }
        function removeDeviceAttachment (e){
            e.preventDefault();
            switch ($(e.target).data('awardsource')) {
                case "#ribbonRack1":
                    rack1 = removeDeviceAttachmentFromAward(rack1, $(e.target));
                    renderRack1();
                    break;
                case "#ribbonRack2":
                    rack2 = removeDeviceAttachmentFromAward(rack2, $(e.target));
                    renderRack2();
                    break;
                case "#miniMedalRack":
                    miniMedalRack = removeDeviceAttachmentFromAward(miniMedalRack, $(e.target));
                    renderMiniMedalRack();
                    break;
                case "#largeMedalRack":
                    largeMedalRack = removeDeviceAttachmentFromAward(largeMedalRack, $(e.target));
                    renderLargeMedalRack();
                    break;
                
            }
        }
        function removeDeviceAttachmentFromAward(rack, $selectorAward) {
            var awardCode = "";
            var coordinates = [];
            var awardJSON = JSON.parse(decodeURI($selectorAward.attr("awardJSON")));

            rack.forEach(function (row, rowIndex) {
                row.columns.forEach(function (column, columnIndex) {
                    if (column.name !== "N/A" && column.code.split(" ")[0] === awardJSON.code.split(" ")[0]) {
                        coordinates = [rowIndex, columnIndex];
                        awardCode = column.code;
                    }
                });
            });
            if (awardCode.indexOf("+") > -1) {
                var awardTokens = awardCode.split(" + ");
                awardTokens.splice(awardTokens.length - 1,1);
                awardTokens[0] = awardTokens[0].split(" ")[1];
                awardCode = awardCode.split(' ')[0];
                awardTokens.forEach(function (awardToken, index){
                    var prefix = " ";
                    if (index > 0){
                        prefix = " + "
                    }
                    awardCode += prefix + awardToken;
                });
            } else if (awardCode.indexOf(" ") > -1){
                awardCode = awardCode.split(" ")[0];
            }
            if (awardJSON.devicesAttachments.length > 0) {
                awardJSON.devicesAttachments.pop();
            }
            rack[coordinates[0]].columns[coordinates[1]].devicesAttachments = awardJSON.devicesAttachments;
            rack[coordinates[0]].columns[coordinates[1]].code = awardCode;
            return rack;
        }

        function addDeviceAttachment() {
            var deviceAttachmentAward = JSON.parse(decodeURI($("#device-attachment-award").val()))
            switch ($('#device-attachment-source').val()) {
                case "#ribbonRack1":
                    addDeviceAttachmentToAward(rack1, deviceAttachmentAward, selectedDeviceAttachment);
                    renderRack1();
                    break;
                case "#ribbonRack2":
                    addDeviceAttachmentToAward(rack2, deviceAttachmentAward, selectedDeviceAttachment);
                    renderRack2();
                    break;
                case "#miniMedalRack":
                    miniMedalRack = addDeviceAttachmentToAward(miniMedalRack, deviceAttachmentAward, selectedDeviceAttachment);
                    renderMiniMedalRack();
                    break;
                case "#largeMedalRack":
                    largeMedalRack = addDeviceAttachmentToAward(largeMedalRack, deviceAttachmentAward, selectedDeviceAttachment);
                    renderLargeMedalRack();
                    break;
            }
            $("#devicesAttachmentsPalette").modal('toggle');
        }

        function addDeviceAttachmentToAward(rack, selectedAward, selectedDeviceAttachment) {
            var coordinates = [];
            rack.forEach(function (row, rowIndex){
                row.columns.forEach(function(column, columnIndex){
                    if (column.name !== "N/A" && column.code.split(" ")[0] === selectedAward.code.split(" ")[0]) {
                        coordinates = [rowIndex, columnIndex];
                    }
                });
            });
            var awardConcatenator = " + "
            if (rack[coordinates[0]].columns[coordinates[1]].code.split(" ").length < 2) {
                awardConcatenator = " ";
            }
            rack[coordinates[0]].columns[coordinates[1]].code += awardConcatenator + selectedDeviceAttachment.code;
            if (!rack[coordinates[0]].columns[coordinates[1]].devicesAttachments){
                rack[coordinates[0]].columns[coordinates[1]].devicesAttachments = [];
            }
            rack[coordinates[0]].columns[coordinates[1]].devicesAttachments.push(selectedDeviceAttachment);
            return rack;
        }

        function insertSpacer(e) {
            var rackSelector = $(e.target).data("awardsource");
            var ribbonToReplaceWithSpace = $(e.target).attr("awardJSON");

            switch(rackSelector) {
                case "#ribbonRack1":
                    rack1 = insertSpacerInRack(rack1,ribbonToReplaceWithSpace);
                    renderRack1();
                    break;
                case "#ribbonRack2":
                    rack2 = insertSpacerInRack(rack2, ribbonToReplaceWithSpace);
                    renderRack2();
                    break;
                case "#miniMedalRack":
                    miniMedalRack = insertSpacerInRack(miniMedalRack, ribbonToReplaceWithSpace);
                    renderMiniMedalRack();
                    break;
                case "#largeMedalRack":
                    largeMedalRack = insertSpacerInRack(largeMedalRack, ribbonToReplaceWithSpace);
                    renderLargeMedalRack();
                    break;
            }
        }

        function insertSpacerInRack(rack, ribbonToReplaceWithSpace) {
            var augmentedRack = [];
            rack.forEach(function (row) {
                var columns = [];
                row.columns.forEach(function (column) {
                    if (column.code === ribbonToReplaceWithSpace.code) {
                        columns.push({name: "N/A"});
                    }
                    columns.push(column);
                });
                augmentedRack.push({columns: columns});
            });
            return augmentedRack;
        }
        
        function removeAward(event) {
            event.preventDefault();
            var awardToRemove = $(event.target).parent().data("ribbon");
            var awardSelector = $(event.target).parent().data("award-source");
            switch (awardSelector) {
                case "#ribbonRack1":
                    rack1 = removeAwardFromRack(rack1, awardToRemove);
                    renderRack1();
                    break;
                case "#ribbonRack2":
                    rack2 = removeAwardFromRack(rack2, awardToRemove);
                    renderRack2();
                    break;
                case "#miniMedalRack":
                    miniMedalRack = removeAwardFromRack(miniMedalRack, awardToRemove);
                    renderMiniMedalRack();
                    break;
                case "#largeMedalRack":
                    largeMedalRack = removeAwardFromRack(largeMedalRack, awardToRemove);
                    renderLargeMedalRack();
                    break;
            }
        }
        function removeAwardFromRack(rack, awardToRemove){
            var removedRack = [];
            rack.forEach(function (row) {
                var newColumns = row.columns.filter(function (col) {
                    return col.name !== awardToRemove.name;
                });
                removedRack.push({columns: newColumns});
            });
            return removedRack;
        }
        function renderAll() {
            rack1 = this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector, false);
            rack2 = this.ribbonListComponent2.setPrecedence(precedence2).renderRack(rack2, rack2Selector, false);
            miniMedalRack = this.miniMedalListComponent.setPrecedence(precedence1).renderRack(miniMedalRack, miniMedalRackSelector, true);
            largeMedalRack = this.largeMedalListComponent.setPrecedence(precedence1).renderRack(largeMedalRack, largeMedalRackSelector, true);
            updateTotals();
        }
        function renderRack1(){
            rack1 = this.ribbonListComponent1.setPrecedence(precedence1).renderRack(rack1, rack1Selector, false);
            updateTotals();
        }

        function renderRack2() {
            rack2 = this.ribbonListComponent2.setPrecedence(precedence2).renderRack(rack2, rack2Selector, false);
            updateTotals();
        }

        function renderMiniMedalRack() {
            miniMedalRack = this.miniMedalListComponent.setPrecedence(precedence1).renderRack(miniMedalRack, miniMedalRackSelector, true);
            updateTotals();
        }

        function renderLargeMedalRack() {
            largeMedalRack = this.largeMedalListComponent.setPrecedence(precedence1).renderRack(largeMedalRack, largeMedalRackSelector, true);
            updateTotals();
        }

        function updateTotalRack1 () {
            var totals = ribbonListComponent1.getTotalsForRack(rack1, "ribbon");
            $("#numRibbons").val(totals.awardCount);
            $("#numDevices").val(totals.awardDeviceCount);
            $("#numAttach").val(totals.awardAttachmentCount);
            var total=totals.awardTotal * parseInt($("#numPin").val());
            total += totals.awardTotal * parseInt($("#numMagnetic").val());
            $("#totalRibbons1").val(total);
        }

        function updateTotalRack2() {
            var totals = ribbonListComponent1.getTotalsForRack(rack2, "ribbon");
            $("#numRibbons2").val(totals.awardCount);
            $("#numDevices2").val(totals.awardDeviceCount);
            $("#numAttach2").val(totals.awardAttachmentCount);
            var total = totals.awardTotal * parseInt($("#numPin2").val());
            total += totals.awardTotal * parseInt($("#numMagnetic2").val());
            $("#totalRibbons2").val(total);
        }

        function updateTotalMiniMedals() {
            var totals = this.miniMedalListComponent.getTotalsForRack(miniMedalRack, "miniMedal");
            $("#numMiniMedals").val(totals.awardCount);
            $("#numMiniMedalDevice").val(totals.awardDeviceCount);
            $("#numMiniMedalAttach").val(totals.awardAttachmentCount);
            $("#totalMiniMedals").val(totals.awardTotal);
        }

        function updateTotalLargeMedals() {
            var totals = this.largeMedalListComponent.getTotalsForRack(largeMedalRack, "largeMedal");
            $("#numLargeMedalSets").val(totals.awardCount);
            $("#numLargeMedalDevice").val(totals.awardDeviceCount);
            $("#numLargeMedalAttach").val(totals.awardAttachmentCount);
            $("#largeMedalsTotal").val(totals.awardTotal);
        }

        function updateTotals() {
            updateTotalRack1();
            updateTotalRack2();
            updateTotalMiniMedals();
            updateTotalLargeMedals();

            var ribbons1 = parseFloat($("#totalRibbons1").val() || 0);
            var ribbons2 = parseFloat($("#totalRibbons2").val() || 0);
            var numRibbons1 = parseInt($("#numRibbons").val() || 0);
            var numRibbons2 = parseInt($("#numRibbons2").val() || 0);
            var attachments1 = parseInt($("#numAttach").val() || 0);
            var attachments2 = parseInt($("#numAttach2").val() || 0);
            var devices1 = parseInt($("#numDevices").val() || 0);
            var devices2 = parseInt($("#numDevices2").val() || 0);
            var numPins1 = parseInt($("#numPin").val() || 0);
            var numPins2 = parseInt($("#numPin2").val() || 0);
            var numMagnetic1 = parseInt($("#numMagnetic").val() || 0);
            var numMagnetic2 = parseInt($("#numMagnetic2").val() || 0);
            var miniMedals = parseFloat($("#totalMiniMedals").val() || 0);
            var largeMedals = parseFloat($("#largeMedalsTotal").val() || 0);

            $("#totalAllRibbonsQuantity").val((numRibbons1 + numRibbons2).toString());
            $("#totalAllRibbonsDevices").val((devices1 + devices2).toString());
            $("#totalAllRibbonsAttach").val((attachments1 + attachments2).toString());
            $("#totalAllRibbonsMagnetic").val((numMagnetic1 + numMagnetic2).toString());
            $("#totalAllRibbonsPin").val((numPins1 + numPins2).toString());
            $("#totalAllRibbonMagnetic").val((numRibbons1 + numRibbons2).toString());


            $("#totalAllRibbons").val((ribbons1 + ribbons2).toFixed(2).toString());
            var total = ribbons1 + ribbons2 + miniMedals + largeMedals;
            $("#totalOrder").val(total.toFixed(2));
            $("#totalGrand").val((total + parseFloat($("#shipping").val())).toFixed(2));
        }

        function setupRackComponents(){
            //var allDeviceAttachments = !{JSON.stringify(devicesAttachments)}
            var precedenceLists = !{JSON.stringify(precedenceLists)};
            var biggerThanBuilder = !{biggerThanBuilder};
            rack1 = !{listRibbons1 ? JSON.stringify(listRibbons1):[]};
            rack2 = !{listRibbons2 ? JSON.stringify(listRibbons2):[]};
            miniMedalRack = !{listMiniMedals ? JSON.stringify(listMiniMedals):[]};
            largeMedalRack = !{listLargeMedals ? JSON.stringify(listLargeMedals):[]};
            this.ribbonListComponent1 = new Rack(precedenceLists, biggerThanBuilder);
            this.ribbonListComponent2 = new Rack(precedenceLists, biggerThanBuilder);
            this.miniMedalListComponent = new Rack(precedenceLists, biggerThanBuilder);
            this.largeMedalListComponent = new Rack(precedenceLists, biggerThanBuilder);
            var $rack1Op = $("#rack1Op");
            var $rack2Op = $("#rack2Op");
            var service = "!{order.service}";

            var guessedOP = this.ribbonListComponent1.guessOP(service);
            var rack1OpVal = $rack1Op.val();
            var rack2OpVal = $rack2Op.val()
            if (rack1OpVal === "please_select") {
                $('#rack1Op option[value=' + guessedOP + ']').prop('selected', true);
                precedence1 = guessedOP;
            } else {
                this.ribbonListComponent1.setPrecedence(rack1OpVal);
            }
            if (rack2OpVal === "please_select") {
                $('#rack2Op option[value=' + guessedOP + ']').prop('selected', true);
                precedence1 = guessedOP;
            } else {
                this.ribbonListComponent2.setPrecedence(rack2OpVal);
            }

            $rack1Op.change(function () {
                precedence1 = $rack1Op.val();
                renderRack1();
            });

            $rack2Op.change(function () {
                precedence2 = $rack2Op.val();
                renderRack2();
            });
            renderAll();
        };

        function submitClick(event) {
            event.preventDefault();
            $.ajax({
                url: "#{action}",
                type: "#{method}",
                contentType: "application/json",
                data: JSON.stringify({
                    id: $("#id").val(),
                    city: $("#city").val(),
                    state: $("#state").val(),
                    zip: $("#zip").val(),
                    email: $("#email").val(),
                    phone: $("#phone").val(),
                    service: $("#service").val(),
                    gender: $("#gender").val()
                }),
                success: function (result) {
                    $("#notification").empty()
                        .attr("class", "")
                        .append(result.message)
                        .addClass("success");
                },
                error: function (jXQHR, errString) {
                    $("#notification").empty()
                        .attr("class", "")
                        .append("Failed operation on user.  Error was:" + errString)
                        .addClass("error");
                }
            });
        };